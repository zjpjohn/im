Old Way - Editing Configuration File Manually
=============================================
Artur Hefczyc <artur.hefczyc@tigase.net>
v2.0, June 2014: Reformatted for AsciiDoc.
:toc:
:numbered:
:website: http://tigase.net
:Date: 2010-04-06 21:18

Options you most likely have to change at deployment time are:

. *Admin* *accounts* -  account names where all admin messages are sent.
. *Hostnames* -  real and virtual hostnames your server has to serve for.
. *Logs* -  setting related to log file location and how much information should be logged there.

Please let me know if you think more options should be described here.

At the moment the only way to change configuration is to manually edit XML config file. So be prepared for tough times. The good news it that more user friendly interfaces are scheduled for next release. And it will be also reconfigure server at runtime without need to restart service.

Admin Accounts
--------------

This is the most likely thing to change after you install server and generate default configuration. Actually it is also the easiest option to customize.

Open +tigase-config.xml+ in you favorite text editor and search for string: "*admins*". You should find section looking like this:

[source,bash]
-------------------------------------
<entry type="String[]" key="admins">
    <item value="admin%40your.hostname.com"/>
    <item value="admin%40localhost"/>
</entry>
-------------------------------------

Characters "%40" stand for '@'. So assuming you have just 1 admin account on your installation which is: "*frank@jabber.example.com*" you need to replace above code with:

[source,bash]
-------------------------------------
<entry type="String[]" key="admins">
    <item value="frank%40jabber.example.com"/>
</entry>
-------------------------------------

And yes, you can just remove second entry with admin account: "*admin@localhost*" unless you really want to keep it. Be aware though all system messages will be sent to *ALL* admin accounts.

Well, if the account does not exists the message is discarded and a warning is be printed in log file. Again, read it again, the previous sentence...

It means that the admin account has to be also created in normal way on the Jabber server. Just register it using your Jabber client. The admin accounts setting works just as a forward instruction. So as a result all system and admin messages are forwarded to all admin accounts if they exist.

Obviously you can have admin accounts as many as you like:

[source,bash]
-------------------------------------
<entry type="String[]" key="admins">
    <item value="frank%40jabber.example.com"/>
    <item value="lucy%40jabber.example.com"/>
    <item value="mark%40jabber.example.com"/>
    <item value="brenda%40jabber.example.com"/>
    <item value="luck%40jabber.example.com"/>
</entry>
-------------------------------------
 
Hostnames
---------

This one might be a little bit more tricky than previous as *hostnames* setting has to be changed in a few places. Don't ask why now as this is a "Short Configuration Guide", you remember. Here we focus on *how* not on *why*.

You have to search configuration file for string "*hostnames*". There are more than one such sections and you have to find *ALL* sections looking like:

[source,bash]
-------------------------------------
<entry type="String[]" key="hostnames">
    <item value="your.hostname.com"/>
    <item value="localhost"/>
</entry>
-------------------------------------

It may also look like:

[source,bash]
-------------------------------------
<entry type="String[]" key="hostnames">
    <item value="localhost"/>
</entry>
-------------------------------------

Depending how successful was mechanism for automatic hostname detection. It of course does not depends on your luck. It depends on network configuration on your server.

The first form is more useful as it includes also hostname recognized in network environment. If it is correct then you can just leave it as it is. If it is incorrect you have to change it. Please remember, if you want your server to be able to communicate with other _Jabber/XMPP_ servers the hostname you put there must resolve in DNS to your Jabber server machine IP address. In other words. If you try to connect from the Internet to machine with this hostname the connection should reach your Jabber server.

And remember your Jabber server users' _JIDs (Jabber IDs)_ can include only those hostnames which are included in the configuration. So for our case you can use only _JIDs:_ "_user2@your.hostname.com_", "_user1@your.hostname.com_" and so on.

If you server have more Internet addresses (virtual domains) assigned to it your Jabber server can use them all. So your configuration may look like:

[source,bash]
-------------------------------------
<entry type="String[]" key="hostnames">
    <item value="your.hostname.com"/>
    <item value="clien1.hostname.com"/>
    <item value="another.hostname.com"/>
    <item value="jabber.sample-domain.com"/>
    <item value="jabber.some-project.org"/>
    <item value="localhost"/>
</entry>
-------------------------------------

In such case users' _JIDs_ on your Jabber server may include any of defined above domains like: "_user1@your.hostname.com_", "_user1@clien1.hostname.com_", "_user1@jabber.sample-domain.com_". Each of these 3 sample JIDs refer to different user account.

Your server will accept connections only for domains defined in configuration file.

In majority cases it does not matter whether you leave "*localhost*" or remove it. It is sometimes better to leave it though. So if you are not sure if you can remove it in your environment just leave it as is.
 
Logs
----

Logging mechanism is very flexible in Tigase server. You can adjust separate logging level for each single component. You can also direct loggin to many different destinations like console, file, network socket and so on. Unfortunately it also mean it is a bit complex. The general idea however is quite simple so once you understand it it shouldn't be difficult for you anymore. This guide however describes logging very briefly. Loot at full configuration documentation for detailed explanation.

In standard sever configuration you usually want to turn off all logging to console and all warning and more serious notices directed to log file. Let's say logs will be written to +/var/log/tigase-server.log+ which shouldn't get bigger than 10MB and 5 old logs will be preserved. Here are instructions how to set options.

Open +tigase-config.xml+ in you favorite text editor and search for string: "*logging*". You should find section looking like this:

[source,bash]
-------------------------------------
<node name="logging">
  <map>
    <entry value="FINE" type="String" key=".level"/>
    <entry value="java.util.logging.ConsoleHandler+java.util.logging.FileHandler" type="String" key="handlers"/>
    <entry value="tigase.util.LogFormatter" type="String" key="java.util.logging.ConsoleHandler.formatter"/>
    <entry value="WARNING" type="String" key="java.util.logging.ConsoleHandler.level"/>
    <entry value="true" type="String" key="java.util.logging.FileHandler.append"/>
    <entry value="5" type="String" key="java.util.logging.FileHandler.count"/>
    <entry value="tigase.util.LogFormatter" type="String" key="java.util.logging.FileHandler.formatter"/>
    <entry value="ALL" type="String" key="java.util.logging.FileHandler.level"/>
    <entry value="100000" type="String" key="java.util.logging.FileHandler.limit"/>
    <entry value="logs%2Ftigase.log" type="String" key="java.util.logging.FileHandler.pattern"/>
    <entry value="true" type="String" key="tigase.useParentHandlers"/>
  </map>
</node>
-------------------------------------

Assuming we make this guide easy and strightforward let me show how this section should look like after modification. So you could just copy and paste it to your config file without going into details. After the configuration code I will briefly explain what each line means so you should be able to further adjust settings for your needs.

[source,bash]
-------------------------------------
<node name="logging">
  <map>
    <entry value="WARNING" type="String" key=".level"/>
    <entry value="java.util.logging.ConsoleHandler+java.util.logging.FileHandler" type="String" key="handlers"/>
    <entry value="tigase.util.LogFormatter" type="String" key="java.util.logging.ConsoleHandler.formatter"/>
    <entry value="tigase.util.LogFormatter" type="String" key="java.util.logging.FileHandler.formatter"/>
    <entry value="OFF" type="String" key="java.util.logging.ConsoleHandler.level"/>
    <entry value="true" type="String" key="java.util.logging.FileHandler.append"/>
    <entry value="5" type="String" key="java.util.logging.FileHandler.count"/>
    <entry value="ALL" type="String" key="java.util.logging.FileHandler.level"/>
    <entry value="10000000" type="String" key="java.util.logging.FileHandler.limit"/>
    <entry value="%2Fvar%2Flog%2Ftigase-server.log" type="String" key="java.util.logging.FileHandler.pattern"/>
    <entry value="true" type="String" key="tigase.useParentHandlers"/>
  </map>
</node>
-------------------------------------

Each Line Explained:
~~~~~~~~~~~~~~~~~~~~

[source,bash]
-------------------------------------
<entry value="WARNING" type="String" key=".level"/>
-------------------------------------

Effectively we set +WARNING+ level for all possible logs for all possible components. So more detailed logging information will be discarded. All possible log levels are: +OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL+.

[source,bash]
-------------------------------------
<entry value="java.util.logging.ConsoleHandler+java.util.logging.FileHandler" type="String" key="handlers"/>
-------------------------------------

We set 2 handlers for logging information: console and file handler. As we are going to turn off logging to console we could remove all configuration settings for console handler as well. It would simplify configuration file. I don't recommend it though. If there are any problems with your installation switching console logging on might be very helpful and if you remove these settings from config file it may be difficult to bring them back. Hm... maybe not with such excellent documentation.... ;-)

[source,bash]
-------------------------------------
<entry value="tigase.util.LogFormatter" type="String" key="java.util.logging.ConsoleHandler.formatter"/>
<entry value="tigase.util.LogFormatter" type="String" key="java.util.logging.FileHandler.formatter"/>
-------------------------------------

We set here log formatter for console and file handler. Standard Java handlers print each log message in 2 lines. Tigase formatter prints all logging info in 1 line which make it much easier to filter logs by log type, logging component or log level or whatever you wish. You can just use simple sed command and that's it.

[source,bash]
-------------------------------------
<entry value="OFF" type="String" key="java.util.logging.ConsoleHandler.level"/>
-------------------------------------

Here we just switch console handler off. To switch it on back set any different level from the list above.

[source,bash]
-------------------------------------
<entry value="true" type="String" key="java.util.logging.FileHandler.append"/>
-------------------------------------

This settings is to controll whether we want to append logs into old log file or we want to create new log file (removing old content) each time server is restarted.

[source,bash]
-------------------------------------
<entry value="5" type="String" key="java.util.logging.FileHandler.count"/>
-------------------------------------

Sets number of old log files to preserve to 5.

[source,bash]
-------------------------------------
<entry value="ALL" type="String" key="java.util.logging.FileHandler.level"/>
-------------------------------------

This line sets the logging level for file handler. Here we set that we want all possible logs to be written to the file. The global level setting however says that only +WARNING+ logs will be generated. So if you want to have more detailed logs you need to adjust global logging level.

[source,bash]
-------------------------------------
<entry value="10000000" type="String" key="java.util.logging.FileHandler.limit"/>
-------------------------------------

Log file maximum size set to 10MB. After reaching this size the log file is closed and new file is created.

[source,bash]
-------------------------------------
<entry value="%2Fvar%2Flog%2Ftigase-server.log" type="String" key="java.util.logging.FileHandler.pattern"/>
-------------------------------------

Location of the log file and file name: +/var/log/tigase-server.log+. Please note *%2F* instead of \'*/*' character.

[source,bash]
-------------------------------------
<entry value="true" type="String" key="tigase.useParentHandlers"/>
-------------------------------------

This setting requires going into more details so it is explained in comprehensive configuration guide.

