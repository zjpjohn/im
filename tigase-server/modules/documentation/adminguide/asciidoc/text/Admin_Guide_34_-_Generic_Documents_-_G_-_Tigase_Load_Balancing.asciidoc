//[[genericLoadBalancing]]
Tigase Load Balancing
=====================
Wojciech Kapcia <wojciech.kapcia@tigase.org>
v2.0, June 2014: Reformatted for AsciiDoc.
:toc:
:numbered:
:website: http://tigase.net
:Date: 2013-06-10 15:49

Starting with version 5.2.0 Tigase introduces a load balancing functionality allowing users to be redirected to the most suitable cluster node. Functionality relies on a see-other-host XMPP stream error message. Basic principle behind the mechanism is that user will get redirect if the host returned by the implementaion differ from the host to which user currently tries to connect. It is required that the user JID to be known for the redirection to work correctly.

Available Implementations
-------------------------

Tigase implementation is, as usual, extensible and allows for different, pluggable redirection strategies that implement _SeeOtherHostIfc_ interface.

Currently there are three strategies available:

- _SeeOtherHost_ - most basic implementation returning either single host configured in init.properties file or name of the current host;
- _SeeOtherHostHashed_ (default) - default implementation for cluster environment of SeeOtherHostIfc returning redirect host based on the hash value of the user's JID; list of the available nodes from which selection would be made is by default composed and reflects all connected nodes, alternatively hosts list can be configured in the init.properties;
- _SeeOtherHostDB_ - extended implementation of SeeOtherHost using redirect information from database in the form of pairs user_id and node_id to which given user should be redirected.

Configuration Options
---------------------

Most basic configuration is related to the choice of actual redirection implementation:

--cm-see-other-host=

Possible values are:

- tigase.server.xmppclient.SeeOtherHost
- tigase.server.xmppclient.SeeOtherHostHashed
- tigase.server.xmppclient.SeeOtherHostDB
- none - disables redirection

All the remaining options are configured on per-connection-manager basis thus all options need to be prefixed with corresponding connection manager ID, i.e. c2s, bosh or ws; we will use c2s in the examples:

- c2s/cm-see-other-host/default-host=host1;host2;host3 - a semicolon separated list of hosts to be used for redirection;
- c2s/cm-see-other-host/active=OPEN;LOGIN
+
a semicolon separated list of phases in which redirection should be active;
+
  * currently possible values are:
  * _OPEN_ which enables redirection during opening of the XMPP stream;
  * _LOGIN_ which enables redirection upon authenticating user session;
  * by default redirection is currently enabled only in the _OPEN_ phase.

For SeeOtherHostDB implementation there are additional options:

- c2s/cm-see-other-host/db-url - a JDBC connection URI which should be used to query redirect information; if not configured --user-db-uri will be used;
- c2s/cm-see-other-host/get-host-query - a SQL query which should return redirection hostname;
- c2s/cm-see-other-host/get-all-data-query - a SQL helper query which should return all redirection data from database;
- c2s/cm-see-other-host/get-all-query-timeout - allows to set timeout for executed queries.

