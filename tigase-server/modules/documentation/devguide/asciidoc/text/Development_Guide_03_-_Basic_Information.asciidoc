Basic Information
=================
Artur Hefczyc <artur.hefczyc@tigase.net>
v2.0, June 2014: Reformatted for AsciiDoc.
:toc:
:numbered:
:website: http://tigase.net/
:Date: 2010-04-06 21:22
  
Tigase Server Elements
----------------------
To make it easier to get into the code below are defined basic terms in Tigase server world and there is a brief explanation how the server is designed and implemented. This document also points you to basic interfaces and implementations which can be used as example code reference.

Logically all server code can be divided into 3 kinds of modules: *components*, *plug-ins* and *connectors*.

. *Component* is the main element of Tigase server is. Component is a bigger piece of code which can have separate address, can receive and send stanzas, can be configured and respond to numerous events. Sample components implemented for Tigase server are: _c2s connection manager_, _s2s connection manager_, _session manager_, _XEP-0114 - external component connection manager_, _MUC - multi user char rooms_.
. *Plug-in* is usually small piece of code responsible for processing particular XMPP stanza. It doesn't have own address. As a result of stanza processing it can produce new XMPP stanzas. Plug-ins are loaded by _session manager_ component or _c2s connection manager_ component. Sample plug-ins are: _vCard_ stanza processing, _jabber:iq:register_ to register new user accounts, _presence_ stanza processing, _jabber:iq:auth_ for non-sasl authentication and so on....
. *Connector* is a module responsible to for access to data repository like database, LDAP to store and retrieve user data. There are 2 kinds of connectors: authentication connectors and user data connectors. Both of them are independent and can connect to different data sources. Sample connectors are: _JDBC database_ connector, _XMLDB - embedded database_ connector, _Drupal database_ connector, _LibreSource database_ connector.

There is API defined for each kind of above modules and all you have to do is implementation of specific interface. Then the module can be loaded to the server based on configuration settings. There are also available abstract classes implementing these interfaces to make development easier.

Here is a brief list of all interfaces to look at and for more details you have to refer to the guide for specific kind of module.

Component
~~~~~~~~~

This is list of interfaces to look at when you work on a new component:

. *tigase.server.ServerComponent* - this is the very basic interface for component. All components must implement it.
. *tigase.server.MessageReceiver* - this interface extends +ServerComponent+ and is required to implement by components which want to receive data packets like _session manager_, _c2s connection manager_ and so on...
. *tigase.conf.Configurable* - implementing this interface is required to make it configurable. For each object of this type configuration is pushed to it at any time at runtime. This is necessary to make it possible to change configuration at runtime. Implementation should be careful enough to handle this properly.
. *tigase.disco.XMPPService* - Objects of which inherit this interface can respond to "ServiceDiscovery" requests.
. *tigase.stats.StatisticsContainer* - Objects which inherits this type can return runtime statistics. Any object can collect job statistics and implementing this interface guarantees that statistics will be presented in consisted way to user who wants to see them.

Instead of implementing above interfaces directly I would recommend to extend one of existing abstract classes which take care of the most of "dirty and boring" stuff. Here is a list the most useful abstract classes:


- *tigase.server.AbstractMessageReceiver* - implements 4 basic interfaces:
+
+ServerComponent+, +MessageReceiver+, +Configurable+ and +StatisticsContainer+. It also manages internal data queues using own threads which prevents from dead-locks. It offers even-driven data processing which means whenever packet arrives +abstract void processPacket(Packet packet);+ method is called to process it. You have to implement this abstract method in your component. If your component wants to send a packet (in response to data it received for example) it needs to call
+
[source,java]
----------------------------------
boolean addOutPacket(Packet packet)
----------------------------------
+
method. This is it, I mean basic implementation.

- *tigase.server.ConnectionManager* - this is an extension of +AbstractMessageReceiver+ abstract class. As its name says this class takes care of all network connection management stuff. If your component needs to send and receive data directly from the network (like c2s connection, s2s connection or external component) you should use this implementation as a basic class. It takes care of all things related to networking, I/O, reconnecting, listening on socket, connecting and so on. If you extend this class you have to expect data coming from to sources: from the +MessageRouter+ and this is when
+
[source,java]
----------------------------------
abstract void processPacket(Packet packet);
----------------------------------
+
method is called and from network connection and then
+
[source,java]
----------------------------------
abstract Queue processSocketData(XMPPIOService serv);
----------------------------------
+
method is called.

Plug-in
~~~~~~~
All Tigase plugins currently implemented are located in package: tigase.xmpp.impl. You can use this code as a sample code base. There are 3 types of plug-ins and they are defined in interfaces located in +tigase.xmpp+ package:

. *XMPPProcessorIfc* - the most important and basic plug-in. This is the most common plug-in type which just processes stanzas in normal mode. It receives packets, processes them on behalf of the user and returns resulting stanzas.
. *XMPPPreprocessorIfc* -
. *XMPPPostprocessorIfc* -

Connector
---------

Data, Stanzas, Packets - Data Flow and Processing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data received from the network are read from the network sockets as bytes by code in +tigase.io+ package. Bytes then are changed into characters in classes of +tigase.net+ package and as characters they are put to XML parser (+tigase.xml+) which turns them to XML DOM structures.

All data inside the server are exchanged in XML DOM form as this is the format used by XMPP protocol. For basic XML data processing (parsing characters stream, building DOM, manipulate XML elements and attributes) we use link:https://svn.tigase.org/reps/tigase-xmltools/trunk/[Tigase XML parser and DOM builder].

Each stanza is stored in +tigase.xml.Element+ object. Every Element can contain any number of +child Elements+ and any number of attributes. You can access all these data through the class API.

To simplify some, most common operations Element is wrapped in +tigase.server.Packet+ class which offer another level of API for the most common operations like preparation of response stanza based on the element it contains (swap to/from values, put type=result attribute and so on...).

